- name: Create/Start the api-gateway container
  hosts: all
  gather_facts: false
  collections:
    - containers.podman
  vars:
    event_id: "{{ ansible_eda.event.payload.event_id }}"
    episode_id: "{{ ansible_eda.event.payload.itsi_group_id }}"
    comment_text: "Investigated â€“ root cause fixed b Ansible Automation Platform job : https://18.171.172.51/execution/jobs/playbook/{{ tower_job_id }}/output"
    target_image: "docker.io/springcommunity/spring-petclinic-api-gateway"
    is_group: true
    new_status: 4
    controller_token: KeidQrFmVGYe0VBmAYopx8rMOSqMSD
    controller_host: localhost
    
  vars_files:
    - splunk
    
  tasks:

    - name: Set current Job ID as a custom stat
      ansible.builtin.set_stats:
       data:
        current_job_id: "{{ tower_job_id }}"
      run_once: true

    - name: Set Persistent Episode details
      ansible.builtin.set_stats:
       data:
        episode_id: "{{ ansible_eda.event.payload.itsi_group_id }}"
      run_once: true

    - name: Start api-gateway container
      containers.podman.podman_container:
        name: api-gateway
        image: docker.io/springcommunity/spring-petclinic-api-gateway:latest
        state: started
        detach: true
        privileged: true
        network:
          - petclinic-net
        publish:
          - "8180:8080"
          - "9016:9016"
        env:
          SPRING_PROFILES_ACTIVE: docker
          SPRING_JMX_ENABLED: "true"
          MANAGEMENT_METRICS_EXPORT_JMX_ENABLED: "true"
          MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: "true"
          JAVA_TOOL_OPTIONS: >
            -Dcom.sun.management.jmxremote
            -Dcom.sun.management.jmxremote.port=9016
            -Dcom.sun.management.jmxremote.rmi.port=9016
            -Dcom.sun.management.jmxremote.authenticate=false
            -Dcom.sun.management.jmxremote.ssl=false
            -Djava.rmi.server.hostname=127.0.0.1

    # - name: Event ID
    #   debug:
    #     msg: "{{ ansible_eda.event.payload.event_id }}"
        
    # - name: Check if episode exists
    #   uri:
    #    url: "https://{{ splunk_host }}:{{ splunk_port }}/servicesNS/nobody/SA-ITOA/event_management_interface/notable_event_group/{{ episode_id }}"
    #    method: GET
    #    user: "{{ splunk_user }}"
    #    password: "{{ splunk_pass }}"
    #    force_basic_auth: yes
    #    validate_certs: no


    # - name: "Get job details from AAP"
    #   ansible.builtin.uri:
    #     url: "https://{{ controller_host }}/api/v2/jobs/{{ current_job_id }}/"
    #     method: GET
    #     headers:
    #       Content-Type: "application/json"
    #       Authorization: "Bearer {{ controller_token }}"
    #     validate_certs: false 
    #     status_code: 200
    #   register: job_details_result

      
    # - name: Job Details
    #   debug:
    #     msg: "{{ job_details_result }}"


    # - name: Add comment to Splunk notable event
    #   uri:
    #     url: https://{{ splunk_host }}:{{ splunk_port }}/servicesNS/nobody/SA-ITOA/event_management_interface/notable_event_comment
    #     method: POST
    #     user: "{{ splunk_user }}"
    #     password: "{{ splunk_pass }}"
    #     force_basic_auth: yes
    #     validate_certs: no
    #     headers:
    #       Content-Type: application/json
    #     body_format: json
    #     body:
    #       comment: "{{ comment_text }}"
    #       event_id: "{{ episode_id }}"
    #       is_group: true
    #     status_code: 200
    #   register: comment_response

    # - name: Display comment response
    #   debug:
    #     var: comment_response.json

    # - name: Set episode status to Resolved
    #   ansible.builtin.uri:
    #     url: "https://{{ splunk_host }}:{{ splunk_port }}/servicesNS/nobody/SA-ITOA/event_management_interface/notable_event_group/{{ episode_id }}"
    #     method: POST
    #     user: "{{ splunk_user }}"
    #     password: "{{ splunk_pass }}"
    #     force_basic_auth: yes
    #     body:
    #       status: 4
    #     body_format: json
    #     validate_certs: false
    #     status_code: 200

  
