- name: Create/Start the api-gateway container
  hosts: all
  gather_facts: true
  collections:
    - containers.podman
  vars:
    event_id: "{{ ansible_eda.event.payload.event_id }}"
    episode_id: "{{ ansible_eda.event.payload.itsi_group_id }}"
   # comment_text: "Investigated – root cause fixed b Ansible Automation Platform job : https://18.171.172.51/execution/jobs/playbook/{{ tower_job_id }}/output"
    target_image: "docker.io/springcommunity/spring-petclinic-api-gateway"
    is_group: true
    new_status: 4
    splunk_event_time: "{{ ansible_eda.event.payload.start_time }}"
    comment_text: |
          Investigated – root cause fixed by Ansible Automation Platform job: 
          https://ec2-18-171-172-51.eu-west-2.compute.amazonaws.com/execution/jobs/playbook/{{ tower_job_id }}/output 
          Ansible Remediation job took {{ task_duration }} seconds
    
    
  vars_files:
    - splunk
    
  tasks:

    # - name: Convert time of incident
    #   ansible.builtin.set_fact:
    #     start_time_readable: "{{ splunk_event_time | float | to_datetime }}"
        
    - name: Start Simple Metric ## Instead of API request to AAP
      set_fact:
        task_start_time: "{{ lookup('pipe', 'date +%s') }}"

    - name: Set current Job ID as a custom stat ## For potential workflow setup 
      ansible.builtin.set_stats:
       data:
        current_job_id: "{{ tower_job_id }}"
      run_once: true

    - name: Set Persistent Episode details
      ansible.builtin.set_stats:
       data:
        episode_id: "{{ ansible_eda.event.payload.itsi_group_id }}"
      run_once: true

    - name: Start api-gateway container
      containers.podman.podman_container:
        name: api-gateway
        image: docker.io/springcommunity/spring-petclinic-api-gateway:latest
        state: started
        detach: true
        privileged: true
        network:
          - petclinic-net
        publish:
          - "8180:8080"
          - "9016:9016"
        env:
          SPRING_PROFILES_ACTIVE: docker
          SPRING_JMX_ENABLED: "true"
          MANAGEMENT_METRICS_EXPORT_JMX_ENABLED: "true"
          MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: "true"
          JAVA_TOOL_OPTIONS: >
            -Dcom.sun.management.jmxremote
            -Dcom.sun.management.jmxremote.port=9016
            -Dcom.sun.management.jmxremote.rmi.port=9016
            -Dcom.sun.management.jmxremote.authenticate=false
            -Dcom.sun.management.jmxremote.ssl=false
            -Djava.rmi.server.hostname=127.0.0.1

    # - name: Record end time
    #   ansible.builtin.command: date +%s.%N
    #   changed_when: false
    #   register: end_time_result

    # - name: Calculate durations
    #   ansible.builtin.set_fact:
    #     end_time_readable: "{{ end_time_result.stdout | to_datetime }}"
    #     task_run_duration: "{{ (end_time_result.stdout | float) - (task_start_time | float) }}"
    #     total_incident_duration: "{{ (end_time_result.stdout | float) - (splunk_event_time | float) }}"
            
    - name: Record end time and calculate duration
      set_fact:
        task_end_time: "{{ lookup('pipe', 'date +%s') }}"
        task_duration: "{{ lookup('pipe', 'date +%s') | int - task_start_time | int }}"

    - name: print task time
      debug:
        msg : "{{ task_duration }}"
        
    - name: Check if episode exists
      uri:
       url: "https://{{ splunk_host }}:{{ splunk_port }}/servicesNS/nobody/SA-ITOA/event_management_interface/notable_event_group/{{ episode_id }}"
       method: GET
       user: "{{ splunk_user }}"
       password: "{{ splunk_pass }}"
       force_basic_auth: yes
       validate_certs: no

    - name: Add comment to Splunk notable event
      uri:
        url: https://{{ splunk_host }}:{{ splunk_port }}/servicesNS/nobody/SA-ITOA/event_management_interface/notable_event_comment
        method: POST
        user: "{{ splunk_user }}"
        password: "{{ splunk_pass }}"
        force_basic_auth: yes
        validate_certs: no
        headers:
          Content-Type: application/json
        body_format: json
        body:
          comment: "{{ comment_text }}"
          event_id: "{{ episode_id }}"
          is_group: true
        status_code: 200
      register: comment_response

    - name: Display comment response
      debug:
        var: comment_response.json

    - name: Set episode status to Resolved
      ansible.builtin.uri:
        url: "https://{{ splunk_host }}:{{ splunk_port }}/servicesNS/nobody/SA-ITOA/event_management_interface/notable_event_group/{{ episode_id }}"
        method: POST
        user: "{{ splunk_user }}"
        password: "{{ splunk_pass }}"
        force_basic_auth: yes
        body:
          status: 4
        body_format: json
        validate_certs: false
        status_code: 200

  
